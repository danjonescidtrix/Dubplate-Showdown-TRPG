/*!
 * Dubplate-Showdown-TRPG
 * 
 * 
 * @author Dan Jones
 * @version 1.0.5
 * Copyright 2017. MIT licensed.
 */
document.addEventListener("DOMContentLoaded",function(){"use strict";function e(e){1===d&&(console.log("Round: "+c),n(o,l,e),setTimeout(function(){t(o,l),o.dubRage+=20,l.dubRage+=20,console.log("Round Finished"),console.log("--------------"),c++},2e3))}function a(e,a){return Math.floor(Math.random()*(a-e+1)+e)}function t(e,t){var n,o,l=["defaultAttack","special1"],c=l[Math.floor(Math.random()*l.length)];switch(c){case"defaultAttack":n=t.defaultAttack[0],o=t.defaultAttack[1];break;case"special1":n=t.special1[0],o=t.special1[1]}var m=a(n,o);e.health-=m,console.log(t.name+" does "+m+" damage to "+e.name),console.log(e.name+" health is now "+e.health),document.getElementById("p1_health").innerHTML=e.health,document.getElementById("p2_health").innerHTML=t.health,console.log(t.name+" turn over"),e.health<=0&&console.log(e.name+" is dead, game over... "+t.name+" won!"),h=0,d=1}function n(e,t,n){var o,l;switch(n){case"defaultAttack":o=e.defaultAttack[0],l=e.defaultAttack[1];break;case"special1":o=e.special1[0],l=e.special1[1]}var c=a(o,l);t.health-=c,console.log(e.name+" does "+c+" damage to "+t.name),console.log(t.name+" health is now "+t.health),document.getElementById("p1_health").innerHTML=e.health,document.getElementById("p2_health").innerHTML=t.health,console.log(e.name+" turn over"),console.log(""),t.health<=0&&console.log(t.name+" is dead, game over... "+e.name+" won!"),d=0,h=1}var o,l,c=1,d=1,h=0,m={Simula:{name:"Simula",health:100,dubRage:20,defaultAttack:[16,20],attacks:{special1:{name:"Nasssty frog synths",attack:[25,30],mannaRequired:100}}},Noisia:{name:"Noisia",health:300,defaultAttack:[10,14],dubRage:50,special1:{name:"Diplodocus",attack:[25,30],mannaRequired:140}}};o=m.Simula,l=m.Noisia,console.log(o),console.log(l),document.getElementById("p1_name").innerHTML=o.name,document.getElementById("p2_name").innerHTML=l.name,document.getElementById("p1_health").innerHTML=o.health,document.getElementById("p2_health").innerHTML=l.health,document.getElementById("defaultAttack").onclick=function(){e("defaultAttack")}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
